const GROQ_API_KEY = import.meta.env.VITE_GROQ_API_KEY;

export async function generateSrtToLrcAndPhonetic(srtContent: string): Promise<string> {
  const prompt = `You will receive the full text of a SubRip (.srt) file.

Task:
Convert it to LRC format with dual lines (original + phonetic pronunciation).

Format:
[mm:ss.xx] Original English lyrics (EXACTLY as they appear in the SRT)
[mm:ss.xx] Phonetic pronunciation (readable, not IPA)

Rules:
- Each timestamp appears TWICE: once for original, once for phonetic
- The FIRST line must be the EXACT original English text from the SRT file
- The SECOND line is the phonetic pronunciation for Spanish speakers
- Phonetic should be how it sounds when sung, written in a simple way that a Spanish speaker can read easily
- DO NOT use hyphens (-) anywhere in the phonetic
- Write the phonetic as continuous words or natural chunks
- Use common Spanish-like spelling to mimic English sounds (e.g., "yu" for "you", "wuz" for "was", "kum" for "come")
- Keep exact same timestamps for both lines
- Skip sequence numbers, empty lines, and arrows
- Use format [mm:ss.xx] (replace commas with dots)
- IMPORTANT: Use the EXACT same time format as the original SRT timestamps

Example:
[00:15.00] You can't manufacture America
[00:15.00] yu cant manefoctur america

Return ONLY the LRC content, no explanations:

${srtContent}`;

  const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${GROQ_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'llama-3.1-8b-instant',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.3,
      max_tokens: 2000,
    }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(`Groq API error: ${errorData.error?.message || response.statusText}`);
  }

  const data = await response.json();
  return data.choices[0]?.message?.content || '';
}

export async function polishLyricsWithOriginal(srtContent: string, originalLyrics: string): Promise<string> {
  const prompt = `You are a lyrics polishing assistant. I will provide you with:
1. An SRT file generated by Whisper (may have transcription errors)
2. The original/correct lyrics from the artist

Your task:
1. Compare the SRT content with the original lyrics
2. Fix any transcription errors while keeping the EXACT same timestamps
3. Only change the text content, never the timing
4. Return the corrected SRT file with proper formatting

Rules:
- Keep all timestamps identical
- Only fix text transcription errors
- Maintain SRT format structure
- If a line doesn't match, use the original lyrics text with the SRT timestamp

SRT FROM WHISPER:
${srtContent}

ORIGINAL LYRICS:
${originalLyrics}

Return ONLY the corrected SRT file:`;

  const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${GROQ_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'llama-3.1-8b-instant',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.1,
      max_tokens: 4000,
    }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(`Groq API error: ${errorData.error?.message || response.statusText}`);
  }

  const data = await response.json();
  return data.choices[0]?.message?.content || '';
}