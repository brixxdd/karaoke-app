const GROQ_API_KEY = import.meta.env.VITE_GROQ_API_KEY;

export async function generateSrtToLrcAndPhonetic(srtContent: string): Promise<string> {
  const prompt = `You will receive the full text of a SubRip (.srt) file.

Task:
1. Convert it to standard LRC format:
   - Replace commas with dots in timecodes.
   - Output only lines in the form [mm:ss.xx] text.
   - Skip sequence numbers, empty lines, and arrows.

2. Immediately after, generate a second LRC block with the SAME timestamps but every lyric replaced by its sung-style phonetic pronunciation (readable, not IPA).

Return ONLY the two blocks, no explanations, no metadata.

Start now:

${srtContent}`;

  const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${GROQ_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'llama-3.1-8b-instant',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.3,
      max_tokens: 2000,
    }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(`Groq API error: ${errorData.error?.message || response.statusText}`);
  }

  const data = await response.json();
  return data.choices[0]?.message?.content || '';
}

export async function polishLyricsWithOriginal(srtContent: string, originalLyrics: string): Promise<string> {
  const prompt = `You are a lyrics polishing assistant. I will provide you with:
1. An SRT file generated by Whisper (may have transcription errors)
2. The original/correct lyrics from the artist

Your task:
1. Compare the SRT content with the original lyrics
2. Fix any transcription errors while keeping the EXACT same timestamps
3. Only change the text content, never the timing
4. Return the corrected SRT file with proper formatting

Rules:
- Keep all timestamps identical
- Only fix text transcription errors
- Maintain SRT format structure
- If a line doesn't match, use the original lyrics text with the SRT timestamp

SRT FROM WHISPER:
${srtContent}

ORIGINAL LYRICS:
${originalLyrics}

Return ONLY the corrected SRT file:`;

  const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${GROQ_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      model: 'llama-3.1-70b-versatile',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.1,
      max_tokens: 4000,
    }),
  });

  if (!response.ok) {
    const errorData = await response.json();
    throw new Error(`Groq API error: ${errorData.error?.message || response.statusText}`);
  }

  const data = await response.json();
  return data.choices[0]?.message?.content || '';
}